A short narrative based on the results of your comparisons from Part 3 (do this in the context of expected time complexity of the two data structures and the search algorithm(s))

Short Narrative:

Below is the output for Assignment 6:

The average number of comparisons needed to answer a query is:
(15 + 29 + 16 + 21 + 24 + 33 + 30 + 21 + 22 + 16 + 14 + 17 + 14 + 32 + 33)/15 = 22.47

The average number of comparisons needed to answer a successful query is:
(15 + 29 + 16 + 21 + 24 + 30 + 21 + 14 + 17 + 14)/10 = 20.1

The average number of comparisons needed to answer an unsuccessful query is:
(33 + 22 + 16 + 32 + 33)/5 = 27.2

Below is the output for Assignment 4:

The average number of comparisons needed to answer a query is:
(38383 + 7761 + 611 + 8071 + 41914 + 43364 + 43090 + 4758 + 43364 + 32308 + 6790 + 9648 + 41341 + 43364 + 43364)/15 = 27196.73333333

The average number of comparisons needed to answer a successful query is:
(38383 + 7761 + 611 + 8071 + 41914 + 43090 + 4758 + 32308 + 6790 + 9648 + 41341)/11 = 21317.72727272

The average number of comparisons needed to answer an unsuccessful query is:
4 * 43364/4 = 43364

After comparing the number of comparisons in Assignment 4 to the one in Assignment 6, we can conclude that the Binary Tree is significantly faster than the linear search.

Recall that we used ArrayList in Assignment 4 and did a linear search to match the input town and state String with the town and state data fields of the Place objects stored in the ArrayList. Analyze using the big O notation, we can say that the efficiency of our algorithm in Assignment is O(n), i.e. linear time complexity, due to the linear search method.

Yet this time, we use Binary Search Tree in this Assignment 6, and did a equivalent binary search with the find() method within our BinarySearchTree class. First, we saved the input town and state String into a Place object, and then compare it with the Place objects stored in our Binary Search Tree. Analyze using the big O notation, we can say that the efficiency of our algorithm in Assignment is O(Log(n)), i.e. logarithmic time complexity, due to the equivalent binary search method.
